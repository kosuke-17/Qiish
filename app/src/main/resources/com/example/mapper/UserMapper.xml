<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mapper.UserMapper">

	<!-- ログイン処理 -->
	<select id="userLogin" resultType="com.example.domain.User">
		SELECT user_info_id FROM user
		WHERE email
		= #{email} AND password = #{password}
	</select>

	<!-- ユーザー登録処理 -->
	<insert id="userInfoRegister"
		parameterType="com.example.form.UserRegisterForm"
		useGeneratedKeys="true" keyProperty="id">
		INSERT INTO user_info(user_name,
		email,
		engineer_type)
		VALUES(#{userName}, #{email}, #{engineerType});
	</insert>

	<!-- ユーザー登録処理 -->
	<insert id="userRegister"
		parameterType="com.example.form.UserRegisterForm">
		INSERT INTO user(user_info_id, email, password)
		VALUES(#{id}, #{email}, #{password});
	</insert>

	<!-- ユーザー情報の編集 -->
	<update id="userInfoEdit">
		UPDATE user_info SET 
			user_name=#{userName},
			email=#{email},
			engineer_type=#{engineerType},
			description=#{description}, 
			image=#{image}
		WHERE id=#{userInfoId};
	</update>

	<!-- ログイン情報の編集 -->
	<update id="userEdit">
		UPDATE user SET 
			email=#{email}
		WHERE user_info_id=#{userInfoId};
	</update>

	<!-- ユーザータグの編集 -->
	<insert id="userInfoTagsEdit">
		INSERT INTO user_info_tags(user_info_id, tag_id, tag_order)
		VALUES
		<foreach collection="tagsList" item="tagId" separator="," index="i">
			(#{userId}, #{tagId}, #{i}+1)
		</foreach>
	</insert>

	<!-- ユーザータグの編集 -->
	<delete id="deleteTags" parameterType="java.lang.Integer">
		DELETE FROM user_info_tags
		WHERE user_info_id = #{userId};
	</delete>

	<!-- フォロー -->
	<insert id="userFollow"
		parameterType="com.example.form.UserFollowForm">
		INSERT INTO 
			follow(
			user_info_id, 
			follow_user_info_id
			)
		VALUES(
			#{userInfoId}, 
			#{followUserInfoId}
			);
	</insert>

	<!-- フォロー解除 -->
	<insert id="userRemove"
		parameterType="com.example.form.UserFollowForm">
		DELETE FROM follow
		WHERE user_info_id=#{userInfoId} AND
		follow_user_info_id=#{followUserInfoId};
	</insert>
	
	<!-- フォロー表示 -->
	<select id="followList" resultType="com.example.domain.UserInfo">
		SELECT 
			u.id, 
			u.user_name, 
			u.engineer_type, 
			u.image,
			COALESCE((SELECT u.id = follow_user_info_id FROM follow WHERE follow_user_info_id = f.follow_user_info_id AND user_info_id = #{guestId}),0) AS follow_status
		FROM follow AS f
		LEFT JOIN user_info AS u ON f.follow_user_info_id = u.id
		WHERE user_info_id = #{userInfoId};
	</select>
	
	<!-- フォロワーー表示 -->
	<select id="followerList" resultType="com.example.domain.UserInfo">
		SELECT 
			u.id, 
			u.user_name, 
			u.engineer_type, 
			u.image,
			COALESCE((SELECT u.id = follow_user_info_id FROM follow WHERE follow_user_info_id = f.user_info_id AND user_info_id = #{guestId}),0) AS follow_status
		FROM follow AS f
		LEFT JOIN user_info AS u ON f.user_info_id = u.id
		WHERE follow_user_info_id = #{userInfoId};
	</select>
	
	<!-- 記事投稿ユーザー取得 -->
	<resultMap type="com.example.domain.UserInfo" id="userMap">
		<id property="id" column="u_id"></id>
		<result property="userName" column="u_user_name"></result>
		<result property="engineerType" column="u_engineer_type"></result>
		<result property="description" column="u_description"></result>
		<result property="image" column="u_image"></result>
		<result property="followCount" column="follow_count"></result>
		<result property="followerCount" column="follower_count"></result>
		<result property="articleCount" column="article_count"></result>
		<result property="followStatus" column="follow_status"></result>
		<collection property="tags" ofType="com.example.domain.Tag">
			<result property="id" column="tag_id"></result>
			<result property="skill" column="u_tags"></result>
		</collection>
	</resultMap>
	
	<select id="getPostedUser" resultMap="userMap">
	SELECT
		u.id AS u_id,
		u.user_name AS u_user_name,
		u.engineer_type AS u_engineer_type,
		u.description AS u_description,
		u.image AS u_image,
		t.tag_id,
		(SELECT skill FROM tags WHERE t.tag_id = tags.id) AS u_tags,
		(SELECT COUNT(*) FROM follow WHERE u.id = follow.user_info_id) AS follow_count,
		(SELECT COUNT(*) FROM follow WHERE u.id = follow.follow_user_info_id) AS follower_count,
		(SELECT COUNT(*) FROM articles WHERE u.id = articles.user_info_id) AS article_count,
		COALESCE((SELECT follow_user_info_id = u_id FROM follow WHERE user_info_id = #{guestId} AND follow_user_info_id = u_id),0) AS follow_status
	FROM user_info AS u
	LEFT OUTER JOIN user_info_tags AS t
	ON u.id = t.user_info_id
	WHERE u.id = (SELECT user_info_id FROM articles WHERE id = #{articleId});
	</select>
	
	<!-- パスワード再設定(ユーザー検索) -->
	<select id="resetRequest" resultType="com.example.domain.User">
		SELECT 
			user_info_id, 
			email 
		FROM user
		WHERE email = #{email};
	</select>
	
	<!-- パスワード再設定 -->
	<update id="resetPassword">
		UPDATE user SET password=#{password}
		WHERE email=#{email};
	</update>

</mapper>